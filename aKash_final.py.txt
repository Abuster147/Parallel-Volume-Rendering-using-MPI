import numpy as np
import cv2
import struct

# Constants
TERMINATION_THRESHOLD = 0.99

# Function to read the dataset and reshape it
def read_dataset(filename):
    try:
        with open(filename, 'rb') as file:
            # Example dimensions
            x_dim, y_dim, z_dim = 1000, 1000, 200
            
            # Read data
            total_size = x_dim * y_dim * z_dim
            data = np.fromfile(file, dtype=np.float32, count=total_size)
            
            # Reshape the data to 3D
            data = data.reshape((x_dim, y_dim, z_dim))
            return data, x_dim, y_dim, z_dim
    except FileNotFoundError:
        raise RuntimeError("Failed to open dataset file.")

# Function for opacity transfer function (TF)
def opacity_tf(a):
    intensity = [-4926.59326171875, -1310.073486328125, 103.00382995605469, 2593.85205078125]
    opacity = [1.0, 0.75641030073165894, 0.0, 0.053846154361963272]

    # Edge cases
    if a <= intensity[0]:
        return opacity[0]
    if a >= intensity[-1]:
        return opacity[-1]

    # Linear interpolation
    for i in range(len(intensity) - 1):
        if intensity[i] <= a <= intensity[i + 1]:
            t = (a - intensity[i]) / (intensity[i + 1] - intensity[i])
            return opacity[i] + t * (opacity[i + 1] - opacity[i])
    
    return 0.0

# Function for color transfer function (TF)
def color_tf(a):
    intensity = [-4926.59326171875, -4803.3313118676188, -4680.0693620164884, -4556.8074121653563, -4433.5454623142259, 
                 -4310.2835124630947, -4187.0215626119634, -4063.7596127608322, -3940.4976629097018, -3817.2357130585701, 
                 -3693.9737632074393, -3570.7118133563085, -3447.4498635051768, -3324.1879136540465, -3200.9259638029148, 
                 -3077.664013951784, -2954.4020641006532, -2831.1401142495215, -2707.8781643983912, -2584.6162145472595, 
                 -2466.2847426901749, -2461.3542646961287, -2461.2790602430032, -2333.2752391286131, -2205.2714180142225, 
                 -2077.2675968998333, -1949.2637757854418, -1821.2599546710526, -1693.2561335566616, -1565.2523124422728, 
                 -1437.2484913278809, -1309.2446702134903, -1181.2408490991002, -1053.23702798471, -925.23320687031946, 
                 -797.22938575592889, -669.22556464153877, -541.22174352714865, -413.21792241275853, -285.2141012983684, 
                 -157.21028018397737, -29.206459069587254, 98.872566497928347, 348.3705149262596, 597.86846335459177, 
                 847.36641178292484, 1096.864360211257, 1346.3623086395892, 1595.8602570679204, 1845.3582054962535, 
                 2094.8561539245857, 2344.3541023529178, 2469.1030765670839, 2593.85205078125]
    
    R = [0.301961, 0.396078431372549, 0.49411764705882355, 0.58823529411764708, 0.66274509803921566, 
         0.74117647058823533, 0.78823529411764703, 0.86274509803921573, 0.90196078431372551, 0.91764705882352937, 
         0.92549019607843142, 0.93725490196078431, 0.94509803921568625, 0.95294117647058818, 0.96470588235294119, 
         0.96862745098039216, 0.97254901960784312, 0.98039215686274506, 0.98039215686274506, 0.9882352941176471, 
         0.98431372549019602, 0.9882352941176471, 0.95294117647058818, 0.8901960784313725, 0.82745098039215681, 
         0.77647058823529413, 0.72549019607843135, 0.67843137254901964, 0.63137254901960782, 0.58039215686274515, 
         0.53725490196078429, 0.49803921568627452, 0.46274509803921571, 0.43137254901960786, 0.40392156862745099, 
         0.37254901960784315, 0.34509803921568627, 0.31764705882352939, 0.28627450980392155, 0.25490196078431371, 
         0.23137254901960785, 0.20000000000000001, 0.14902, 0.20000000000000001, 0.24705882352941178, 0.30588235294117649, 
         0.37254901960784315, 0.44313725490196076, 0.51764705882352946, 0.59999999999999998, 0.68627450980392157, 
         0.76078431372549016, 0.80784313725490198, 0.8901960784313725]
    
    G = [0.047059, 0.039215686274509803, 0.054901960784313725, 0.11372549019607843, 0.16862745098039217, 
         0.22745098039215686, 0.29019607843137257, 0.38039215686274508, 0.45882352941176469, 0.52156862745098043, 
         0.58039215686274515, 0.64313725490196083, 0.70980392156862748, 0.7686274509803922, 0.82745098039215681, 
         0.8784313725490196, 0.91764705882352937, 0.94901960784313721, 0.97254901960784312, 0.9882352941176471, 
         0.9882352941176471, 0.9882352941176471, 0.95294117647058818, 0.8901960784313725, 0.82745098039215681, 
         0.77647058823529413, 0.72549019607843135, 0.67843137254901964, 0.63137254901960782, 0.58039215686274515, 
         0.53725490196078429, 0.49803921568627452, 0.46274509803921571, 0.43137254901960786, 0.40392156862745099, 
         0.37254901960784315, 0.34509803921568627, 0.31764705882352939, 0.28627450980392155, 0.25490196078431371, 
         0.23137254901960785, 0.20000000000000001, 0.196078, 0.25490196078431371, 0.31764705882352939, 
         0.38823529411764707, 0.45882352941176469, 0.53333333333333333, 0.61568627450980395, 0.69803921568627447, 
         0.78431372549019607, 0.85882352941176465, 0.90196078431372551]
    
    B = [0.105882, 0.11372549019607843, 0.15294117647058825, 0.17647058823529413, 0.2196078431372549, 
         0.25490196078431371, 0.29803921568627451, 0.36470588235294116, 0.42352941176470588, 0.4823529411764706, 
         0.53725490196078429, 0.60784313725490191, 0.67450980392156867, 0.74509803921568629, 0.80000000000000004, 
         0.85882352941176465, 0.90196078431372551, 0.93333333333333335, 0.96470588235294119, 0.98039215686274506, 
         0.98431372549019602, 0.9882352941176471, 0.95294117647058818, 0.8901960784313725, 0.82745098039215681, 
         0.77647058823529413, 0.72549019607843135, 0.67843137254901964, 0.63137254901960782, 0.58039215686274515, 
         0.53725490196078429, 0.49803921568627452, 0.46274509803921571, 0.43137254901960786, 0.40392156862745099, 
         0.37254901960784315, 0.34509803921568627, 0.31764705882352939, 0.28627450980392155, 0.25490196078431371, 
         0.23137254901960785, 0.20000000000000001, 0.301961, 0.37647058823529411, 0.45490196078431372, 
         0.53333333333333333, 0.61568627450980395, 0.69803921568627447, 0.78431372549019607, 0.86274509803921573, 
         0.94117647058823528, 0.9882352941176471, 0.99607843137254903]
    
    # Edge cases
    if a <= intensity[0]:
        return R[0], G[0], B[0]
    if a >= intensity[-1]:
        return R[-1], G[-1], B[-1]

    # Linear interpolation
    for i in range(len(intensity) - 1):
        if intensity[i] <= a <= intensity[i + 1]:
            t = (a - intensity[i]) / (intensity[i + 1] - intensity[i])
            r = R[i] + t * (R[i + 1] - R[i])
            g = G[i] + t * (G[i + 1] - G[i])
            b = B[i] + t * (B[i + 1] - B[i])
            return r, g, b
    
    return 0.0, 0.0, 0.0

# Function to save an image
def save_image(image, filename):
    cv2.imwrite(filename, image)

# Ray casting function
def ray_casting(volume_data, x_dim, y_dim, z_dim, step=1.0):
    result_image = np.zeros((y_dim, x_dim, 3), dtype=np.uint8)

    for y in range(y_dim):
        for x in range(x_dim):
            alpha_accum = 0.0
            color_accum = np.array([0.0, 0.0, 0.0])

            for z in range(z_dim):
                intensity = volume_data[x, y, z]
                alpha = opacity_tf(intensity)
                color = np.array(color_tf(intensity))
                
                # Composite the color with alpha
                alpha_composite = (1 - alpha_accum) * alpha
                color_accum += alpha_composite * color
                alpha_accum += alpha_composite
                
                if alpha_accum >= TERMINATION_THRESHOLD:
                    break

            result_image[y, x] = (color_accum * 255).astype(np.uint8)
    
    return result_image

# Main function
def main():
    filename = 'dataset.bin'
    volume_data, x_dim, y_dim, z_dim = read_dataset(filename)
    
    result_image = ray_casting(volume_data, x_dim, y_dim, z_dim)
    save_image(result_image, 'output_image.png')

if __name__ == "__main__":
    main()
