 mpirun -np 4 ./work Isabel_1000x1000x200_float32.raw 1 0.75 0 999 0 999
 mpicxx -o work work.cpp `pkg-config --cflags --libs opencv4`


./nompi
g++ nompi.cpp -o nompi `pkg-config --cflags --libs opencv4`


#include <mpi.h>
#include <vector>
#include <iostream>
#include <fstream>
#include <string>
#include <chrono>
#include <cstring>
#include<cmath>
#include <opencv2/opencv.hpp>
#include <opencv2/imgcodecs.hpp>
#include <opencv2/highgui.hpp>
// Define constants
#define TERMINATION_THRESHOLD 0.99
using namespace std;
// Function to read the dataset and reshape it
void readDataset(const std::string& filename, std::vector<float>& data, int& xDim, int& yDim, int& zDim) {
    std::ifstream file(filename, std::ios::binary);
    if (!file) {
        throw std::runtime_error("Failed to open dataset file.");
    }
    
    // Assume the dimensions are known or provided; here we hardcode for demonstration
    xDim = 1000; // Example dimension values
    yDim = 1000;
    zDim = 200;

    size_t totalSize = static_cast<size_t>(xDim) * yDim * zDim;
    data.resize(totalSize);

    file.read(reinterpret_cast<char*>(data.data()), totalSize * sizeof(float));
    
    file.close();
}

float opacityTF(float a){
 float intensity[] = {-4926.59326171875, -1310.073486328125, 103.00382995605469, 2593.85205078125};
    float opacity[] = {1.0, 0.75641030073165894, 0.0, 0.053846154361963272};

    int n = sizeof(intensity) / sizeof(intensity[0]);

    // Handle edge cases where 'a' is outside the given range
    if (a <= intensity[0]) {
        return opacity[0];  // Return max opacity for the lowest intensity
    }
    if (a >= intensity[n-1]) {
        return opacity[n-1];  // Return min opacity for the highest intensity
    }

    // Linear interpolation
    for (int i = 0; i < n - 1; ++i) {
        if (a >= intensity[i] && a <= intensity[i+1]) {
            // Perform linear interpolation
            float t = (a - intensity[i]) / (intensity[i+1] - intensity[i]);
            return opacity[i] + t * (opacity[i+1] - opacity[i]);
        }
    }

    // Should never reach here
    return 0.0f;
}

std::vector<int> colorTF(float a) {
    // Data points: intensity and corresponding (R, G, B) colors (normalized)
    float intensity[] = {-4926.59326171875, -4803.3313118676188, -4680.0693620164884, -4556.8074121653563,
                         -4433.5454623142259, -4310.2835124630947, -4187.0215626119634, -4063.7596127608322,
                         -3940.4976629097018, -3817.2357130585701, -3693.9737632074393, -3570.7118133563085,
                         -3447.4498635051768, -3324.1879136540465, -3200.9259638029148, -3077.664013951784,
                         -2954.4020641006532, -2831.1401142495215, -2707.8781643983912, -2584.6162145472595,
                         -2466.2847426901749, -2461.3542646961287, -2461.2790602430032, -2333.2752391286131,
                         -2205.2714180142225, -2077.2675968998333, -1949.2637757854418, -1821.2599546710526,
                         -1693.2561335566616, -1565.2523124422728, -1437.2484913278809, -1309.2446702134903,
                         -1181.2408490991002, -1053.23702798471, -925.23320687031946, -797.22938575592889,
                         -669.22556464153877, -541.22174352714865, -413.21792241275853, -285.2141012983684,
                         -157.21028018397737, -29.206459069587254, 98.872566497928347, 348.3705149262596,
                         597.86846335459177, 847.36641178292484, 1096.864360211257, 1346.3623086395892,
                         1595.8602570679204, 1845.3582054962535, 2094.8561539245857, 2344.3541023529178,
                         2469.1030765670839, 2593.85205078125};
    
    float R[] = {0.30196099999999998, 0.396078431372549, 0.49411764705882355, 0.58823529411764708,
                 0.66274509803921566, 0.74117647058823533, 0.78823529411764703, 0.86274509803921573,
                 0.90196078431372551, 0.91764705882352937, 0.92549019607843142, 0.93725490196078431,
                 0.94509803921568625, 0.95294117647058818, 0.96470588235294119, 0.96862745098039216,
                 0.97254901960784312, 0.98039215686274506, 0.98039215686274506, 0.9882352941176471,
                 0.98431372549019602, 0.9882352941176471, 0.95294117647058818, 0.8901960784313725,
                 0.82745098039215681, 0.77647058823529413, 0.72549019607843135, 0.67843137254901964,
                 0.63137254901960782, 0.58039215686274515, 0.53725490196078429, 0.49803921568627452,
                 0.46274509803921571, 0.43137254901960786, 0.40392156862745099, 0.37254901960784315,
                 0.34509803921568627, 0.31764705882352939, 0.28627450980392155, 0.25490196078431371,
                 0.23137254901960785, 0.20000000000000001, 0.14902000000000001, 0.20000000000000001,
                 0.24705882352941178, 0.30588235294117649, 0.37254901960784315, 0.44313725490196076,
                 0.51764705882352946, 0.59999999999999998, 0.68627450980392157, 0.76078431372549016,
                 0.80784313725490198, 0.8901960784313725};
    
    float G[] = {0.047058999999999997, 0.039215686274509803, 0.054901960784313725, 0.11372549019607843,
                 0.16862745098039217, 0.22745098039215686, 0.29019607843137257, 0.38039215686274508,
                 0.45882352941176469, 0.52156862745098043, 0.58039215686274515, 0.64313725490196083,
                 0.70980392156862748, 0.7686274509803922, 0.82745098039215681, 0.8784313725490196,
                 0.91764705882352937, 0.94901960784313721, 0.97254901960784312, 0.9882352941176471,
                 0.9882352941176471, 0.9882352941176471, 0.95294117647058818, 0.8901960784313725,
                 0.82745098039215681, 0.77647058823529413, 0.72549019607843135, 0.67843137254901964,
                 0.63137254901960782, 0.58039215686274515, 0.53725490196078429, 0.49803921568627452,
                 0.46274509803921571, 0.43137254901960786, 0.40392156862745099, 0.37254901960784315,
                 0.34509803921568627, 0.31764705882352939, 0.28627450980392155, 0.25490196078431371,
                 0.23137254901960785, 0.20000000000000001, 0.196078, 0.25490196078431371,
                 0.31764705882352939, 0.38823529411764707, 0.45882352941176469, 0.53333333333333333,
                 0.61568627450980395, 0.69803921568627447, 0.78431372549019607, 0.85882352941176465,
                 0.90196078431372551, 0.95686274509803926};
    
    float B[] = {0.090195999999999998, 0.058823529411764705, 0.035294117647058823, 0.023529411764705882,
                 0.015686274509803921, 0.0039215686274509803, 0.0, 0.011764705882352941, 0.027450980392156862,
                 0.047058823529411764, 0.078431372549019607, 0.12156862745098039, 0.18431372549019609,
                 0.24705882352941178, 0.32549019607843138, 0.40000000000000002, 0.47843137254901963,
                 0.55686274509803924, 0.62352941176470589, 0.70588235294117652, 0.78431372549019607,
                 0.85882352941176465, 0.8901960784313725, 0.8901960784313725, 0.82745098039215681,
                 0.77647058823529413, 0.72549019607843135, 0.67843137254901964, 0.63137254901960782,
                 0.58039215686274515, 0.53725490196078429, 0.49803921568627452, 0.46274509803921571,
                 0.43137254901960786, 0.40392156862745099, 0.37254901960784315, 0.34509803921568627,
                 0.31764705882352939, 0.28627450980392155, 0.25490196078431371, 0.23137254901960785,
                 0.20000000000000001, 0.14902000000000001, 0.168627, 0.23137254901960785,
                 0.31764705882352939, 0.38823529411764707, 0.45882352941176469, 0.53333333333333333,
                 0.61568627450980395, 0.69803921568627447, 0.78431372549019607, 0.85882352941176465,
                 0.90196078431372551, 0.95686274509803926};

    int n = sizeof(intensity) / sizeof(intensity[0]);

    // If a is out of bounds, return the first or last color
    if (a <= intensity[0]) return std::vector<int>({int(R[0] * 255), int(G[0] * 255), int(B[0] * 255)});
    if (a >= intensity[n - 1]) return std::vector<int>({int(R[n - 1] * 255), int(G[n - 1] * 255), int(B[n - 1] * 255)});

    // Find the appropriate interval for interpolation
    for (int i = 0; i < n - 1; ++i) {
        if (a >= intensity[i] && a <= intensity[i + 1]) {
            // Linear interpolation factor
            float t = (a - intensity[i]) / (intensity[i + 1] - intensity[i]);
            
            // Interpolate each RGB component
            int red = int((R[i] + t * (R[i + 1] - R[i])) * 255);
            int green = int((G[i] + t * (G[i + 1] - G[i])) * 255);
            int blue = int((B[i] + t * (B[i + 1] - B[i])) * 255);
            
            return std::vector<int>{red, green, blue};
        }
    }

    // Default return, though this shouldn't happen
    return std::vector<int>{0, 0, 0};
}
void saveImageFromVector(const std::vector<float>& data, int width, int height, int channels, const std::string& filename) {
    // Ensure the data is normalized to 0-255 range
    std::vector<uchar> imageData(data.size());
    float minVal = *std::min_element(data.begin(), data.end());
    float maxVal = *std::max_element(data.begin(), data.end());

    for (size_t i = 0; i < data.size(); ++i) {
        imageData[i] = static_cast<uchar>(255 * (data[i] - minVal) / (maxVal - minVal));
    }

    // Create OpenCV Mat object
    cv::Mat image(height, width, CV_8UC(channels), imageData.data());

    // Save the image
    if (!cv::imwrite(filename, image)) {
        std::cerr << "Error: Could not write image to file " << filename << std::endl;
    }
}



void rayCasting(int xStart, int xEnd, int yStart, int yEnd,int zDim, 
                const std::vector<float>& data, float stepSize, 
                std::vector<float>& result, int& earlyTerminatedRays) {
    int yDim = 1000;
    int xSize = xEnd - xStart + 1;
    int ySize = yEnd - yStart + 1;
    int totalRays = xSize * ySize;
    earlyTerminatedRays = 0;

    // Resize result vector to store RGB values for each ray
    result.resize(totalRays * 3, 0.0f);

    for (int x = xStart; x <= xEnd; ++x) {
        for (int y = yStart; y <= yEnd; ++y) {
            float accumulatedValue = 0.0f;
            int r = 0, g = 0, b = 0;

            // Start ray marching along the Z-axis
            for (int z = 0; z < zDim; ++z) {
                // Compute the index in the flattened array (considering the full dimensions)
                int idx = z + y * zDim + x * yDim * zDim;
                // cout << "idx: " << idx << endl;
                // Get RGB and opacity values from the transfer functions
                std::vector<int> rgb = colorTF(data[idx]);
                float op = opacityTF(data[idx]);

                // For the first point along the Z direction
                if (z == 0) {
                    r = rgb[0];
                    g = rgb[1];
                    b = rgb[2];
                    accumulatedValue = op;
                } else {
                    // Accumulate the RGB values with front-to-back compositing
                    r = r + static_cast<int>((1 - accumulatedValue) * rgb[0] * op);
                    g = g + static_cast<int>((1 - accumulatedValue) * rgb[1] * op);
                    b = b + static_cast<int>((1 - accumulatedValue) * rgb[2] * op);
                    
                    // Accumulate the opacity value
                    accumulatedValue = accumulatedValue + (1 - accumulatedValue) * op;
                }

                // Check for early termination
                if (accumulatedValue >= TERMINATION_THRESHOLD) {
                    earlyTerminatedRays++;
                    break;
                }
            }

            // Store the final RGB values for this ray in the result array
            int index = (x - xStart) * ySize + (y - yStart);
            result[index * 3] = static_cast<float>(r);
            result[index * 3 + 1] = static_cast<float>(g);
            result[index * 3 + 2] = static_cast<float>(b);
        }
    }
}
void copySubResultToFinal(int xStart, int yStart, const std::vector<float>& subResult, 
                          std::vector<float>& finalResult, int xBoundMin, int yBoundMin, 
                          int xSize, int ySize, int zDim) {
    for (int i = 0; i < xSize; ++i) {
        for (int j = 0; j < ySize; ++j) {
            int finalIndex = ((xStart - xBoundMin + i) * (ySize) + (yStart - yBoundMin + j)) * 3;
            int subIndex = (i * ySize + j) * 3;
            finalResult[finalIndex] = subResult[subIndex];
            finalResult[finalIndex + 1] = subResult[subIndex + 1];
            finalResult[finalIndex + 2] = subResult[subIndex + 2];
        }
    }
}
// Function to perform domain decomposition and ray casting
void volumeRendering(MPI_Comm comm, int xDim, int yDim, int zDim, const std::vector<float>& data, 
                     float stepSize, int xBoundMin, int xBoundMax, int yBoundMin, int yBoundMax, 
                     int decompositionType) {
    int rank, size;
    MPI_Comm_rank(comm, &rank);
    MPI_Comm_size(comm, &size);
    
    auto start = std::chrono::high_resolution_clock::now();
    
    int xStart, xEnd, yStart, yEnd;
    
    // 1D partitioning
    if (decompositionType == 1) {
        int xChunkSize = (xBoundMax - xBoundMin + 1) / size;
        xStart = xBoundMin + rank * xChunkSize;
        xEnd = (rank == size - 1) ? xBoundMax : xStart + xChunkSize - 1;
        yStart = yBoundMin;
        yEnd = yBoundMax;
    }
    // 2D partitioning
    else if (decompositionType == 2) {
        int procX = std::ceil(std::sqrt(size));
        int procY = size / procX;
        
        int xChunkSize = (xBoundMax - xBoundMin + 1) / procX;
        int yChunkSize = (yBoundMax - yBoundMin + 1) / procY;
        
        int xRank = rank % procX;
        int yRank = rank / procX;
        
        xStart = xBoundMin + xRank * xChunkSize;
        xEnd = (xRank == procX - 1) ? xBoundMax : xStart + xChunkSize - 1;
        
        yStart = yBoundMin + yRank * yChunkSize;
        yEnd = (yRank == procY - 1) ? yBoundMax : yStart + yChunkSize - 1;
    }

    // Allocate memory for the result of this subdomain
    int xSize = xEnd - xStart + 1;
    int ySize = yEnd - yStart + 1;
    std::vector<float> subResult(xSize * ySize * 3, 0.0f);

    // Perform ray casting on the subdomain
    int earlyTerminatedRays = 0;
    rayCasting(xStart, xEnd, yStart, yEnd, zDim, data, stepSize, subResult, earlyTerminatedRays);
    string filename = "output" + to_string(rank) + ".png";
    saveImageFromVector(subResult,xSize,ySize, 3, filename);
    // Prepare for merging the sub-results on rank 0
    if (rank == 0) {
        // Allocate memory for the final result on rank 0
        
        std::vector<float> finalResult((xBoundMax - xBoundMin + 1) * (yBoundMax - yBoundMin + 1) *3, 0.0f);

        // Copy the local subResult into the finalResult
        copySubResultToFinal(xStart, yStart, subResult, finalResult, xBoundMin, yBoundMin, xSize, ySize,zDim);

        // Receive sub-results from other processes and merge into the final result
        for (int i = 1; i < size; i++) {
            int recvXStart, recvXEnd, recvYStart, recvYEnd;
            
            // Receiving the bounds of the subdomain from process i
            MPI_Recv(&recvXStart, 1, MPI_INT, i, 0, comm, MPI_STATUS_IGNORE);
            MPI_Recv(&recvXEnd, 1, MPI_INT, i, 1, comm, MPI_STATUS_IGNORE);
            MPI_Recv(&recvYStart, 1, MPI_INT, i, 2, comm, MPI_STATUS_IGNORE);
            MPI_Recv(&recvYEnd, 1, MPI_INT, i, 3, comm, MPI_STATUS_IGNORE);

            // Calculate the size of the subdomain
            int recvXSize = recvXEnd - recvXStart + 1;
            int recvYSize = recvYEnd - recvYStart + 1;

            // Allocate space for the received subResult
            std::vector<float> recvSubResult(recvXSize * recvYSize * zDim);

            // Receive the subResult from process i
            MPI_Recv(recvSubResult.data(), recvSubResult.size(), MPI_FLOAT, i, 4, comm, MPI_STATUS_IGNORE);

            // Merge the received subResult into the final result
            copySubResultToFinal(recvXStart, recvYStart, recvSubResult, finalResult, xBoundMin, yBoundMin, recvXSize, recvYSize,zDim);
        }
    
        int width = xBoundMax - xBoundMin + 1;
    int height = yBoundMax - yBoundMin + 1;
     
    
    
    // Save the final image
    saveImageFromVector(finalResult, width, height, 3, "output.png");

    } else {
        // Send subdomain bounds to rank 0
        MPI_Send(&xStart, 1, MPI_INT, 0, 0, comm);
        MPI_Send(&xEnd, 1, MPI_INT, 0, 1, comm);
        MPI_Send(&yStart, 1, MPI_INT, 0, 2, comm);
        MPI_Send(&yEnd, 1, MPI_INT, 0, 3, comm);

        // Send subResult to rank 0
        MPI_Send(subResult.data(), subResult.size(), MPI_FLOAT, 0, 4, comm);
    }

    // Calculate the fraction of rays terminated early
    int totalRays = xSize * ySize;
    float fractionTerminated = static_cast<float>(earlyTerminatedRays) / totalRays;

    // Print the fraction of rays terminated early for each process
    std::cout << "Rank " << rank << ": Fraction of rays terminated early = " << fractionTerminated << std::endl;

    // Timing and output
    auto end = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double> elapsed = end - start;

    // Use MPI to get the maximum time across all processes
    double localTime = elapsed.count();
    double maxTime;
    MPI_Reduce(&localTime, &maxTime, 1, MPI_DOUBLE, MPI_MAX, 0, comm);

    if (rank == 0) {
        std::cout << "Total time taken: " << maxTime << " seconds" << std::endl;
    }
}

// Helper function to merge the subResult into the finalResult



int main(int argc, char* argv[]) {
    MPI_Init(&argc, &argv);

    int rank, size;
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    // if (argc < 9) {
    //     if (rank == 0) {
    //         std::cerr << "Usage: mpirun -np <num_processes> ./executable <dataset> <1D/2D> <step_size> "
    //                      "<x_min> <x_max> <y_min> <y_max>" << std::endl;
    //     }
    //     MPI_Finalize();
    //     return -1;
    // }
    cout << "argc: " << argc << endl;

    // Parse input arguments
    std::string datasetFile = argv[1];
    int decompositionType = std::stoi(argv[2]);
    float stepSize = std::stof(argv[3]);
    int xBoundMin = std::stoi(argv[4]);
    int xBoundMax = std::stoi(argv[5]);
    int yBoundMin = std::stoi(argv[6]);
    int yBoundMax = std::stoi(argv[7]);

    // Variables to store dataset dimensions
    int xDim, yDim, zDim;
    std::vector<float> data;

    if (rank == 0) {
        // Read the dataset on rank 0
        readDataset(datasetFile, data, xDim, yDim, zDim);
        
        // for (int i = 0; i < 10; i++) {
        //     printf("%f ", data[i]);
        // }
        // Send dataset dimensions to all processes
        MPI_Bcast(&xDim, 1, MPI_INT, 0, MPI_COMM_WORLD);
        MPI_Bcast(&yDim, 1, MPI_INT, 0, MPI_COMM_WORLD);
        MPI_Bcast(&zDim, 1, MPI_INT, 0, MPI_COMM_WORLD);

        // Send dataset to all processes
        MPI_Bcast(data.data(), xDim * yDim * zDim, MPI_FLOAT, 0, MPI_COMM_WORLD);
    } else {
        // Receive dataset dimensions from rank 0
        MPI_Bcast(&xDim, 1, MPI_INT, 0, MPI_COMM_WORLD);
        MPI_Bcast(&yDim, 1, MPI_INT, 0, MPI_COMM_WORLD);
        MPI_Bcast(&zDim, 1, MPI_INT, 0, MPI_COMM_WORLD);

        // Allocate memory for dataset
        data.resize(xDim * yDim * zDim);
        // for (int i = 0; i < 10; i++) {
        //     printf("%f ", data[i]);
        // }
        // cout << endl;

        // Receive dataset from rank 0
        MPI_Bcast(data.data(), xDim * yDim * zDim, MPI_FLOAT, 0, MPI_COMM_WORLD);

        // for (int i = 0; i < 10; i++) {
        //     printf("%f ", data[i]);
        // }
        // cout << endl;
    }
    cout << "xDim: " << xDim << " yDim: " << yDim << " zDim: " << zDim << "stepSize" << stepSize << " xBoundMin: " << xBoundMin << " xBoundMax: " << xBoundMax << " yBoundMin: " << yBoundMin << " yBoundMax: " << yBoundMax << " decompositionType: " << decompositionType << endl;
    // Perform volume rendering
       volumeRendering(MPI_COMM_WORLD, xDim, yDim, zDim, data, stepSize, xBoundMin, xBoundMax, yBoundMin, yBoundMax, decompositionType);

    MPI_Finalize();
    return 0;
}
